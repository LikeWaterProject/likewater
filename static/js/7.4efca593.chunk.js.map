{"version":3,"sources":["components/EventList.js"],"names":["categories","type","EventType","text","style","backgroundColor","connect","state","events","map","inverted","preferences","invertedTheme","setEventFilter","history","useHistory","nearbyEvents","eventFilters","useState","sortBy","displayEvents","useEvents","filtersVisible","setFiltersVisible","handleItemClick","useCallback","id","push","listItems","useMemo","event","index","Item","key","onClick","eventId","Content","floated","formatDistance","parseInt","reportedDt","Date","now","addSuffix","paddingTop","className","icon","color","Header","eventType","Description","distance","raised","padding","as","visible","animation","duration","position","right","circular","size","content","v","border","textAlign","fontSize","top","maxWidth","height","overflowX","whiteSpace","toggle","handleFilterCategory","divided","selection","verticalAlign","maxHeight","overflowY"],"mappings":"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","file":"static/js/7.4efca593.chunk.js","sourcesContent":["import React, { useState, useCallback, useMemo } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { formatDistance } from \"date-fns\";\r\nimport {\r\n  Segment,\r\n  Header,\r\n  List,\r\n  Button,\r\n  Item,\r\n  Transition,\r\n} from \"semantic-ui-react\";\r\n\r\nimport { setEventFilter } from \"../actions\";\r\nimport { useEvents } from \"../hooks\";\r\nimport * as EventType from \"../events/types\";\r\n\r\nconst categories = [\r\n  {\r\n    type: EventType.AID,\r\n    text: \"Aid\",\r\n    style: { backgroundColor: \"gainsboro\" },\r\n  },\r\n  {\r\n    type: EventType.INFO,\r\n    text: \"Info\",\r\n    style: { backgroundColor: \"mediumseagreen\" },\r\n  },\r\n  {\r\n    type: EventType.POLICE,\r\n    text: \"Police\",\r\n    style: { backgroundColor: \"royalblue\" },\r\n  },\r\n  {\r\n    type: EventType.SAFETY,\r\n    text: \"Safety\",\r\n    style: { backgroundColor: \"darkorange\" },\r\n  },\r\n  {\r\n    type: EventType.EMERGENCY,\r\n    text: \"SOS\",\r\n    style: { backgroundColor: \"crimson\" },\r\n  },\r\n];\r\n\r\nconst EventList = ({ map, events, inverted, setEventFilter }) => {\r\n  const history = useHistory();\r\n  const { nearbyEvents, eventFilters } = events;\r\n  const [sortBy, setSortBy] = useState(\"distance\");\r\n  const displayEvents = useEvents(nearbyEvents, eventFilters, sortBy);\r\n  const [filtersVisible, setFiltersVisible] = useState(false);\r\n  // const { currentPosition, defaultPosition } = map;\r\n\r\n  const handleItemClick = useCallback(\r\n    (id) => {\r\n      history.push(`/events/${id}`);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  const handleFilterCategory = (type) => {\r\n    setEventFilter({ [type]: !eventFilters[type] });\r\n  };\r\n\r\n  const listItems = useMemo(\r\n    () =>\r\n      displayEvents.map((event, index) => (\r\n        <List.Item key={index} onClick={() => handleItemClick(event.eventId)}>\r\n          <List.Content floated=\"right\">\r\n            {formatDistance(parseInt(event.reportedDt), Date.now(), {\r\n              addSuffix: true,\r\n            })}\r\n          </List.Content>\r\n          <List.Content floated=\"left\" style={{ paddingTop: 8 }}>\r\n            <i\r\n              className={`ri-${event.icon}-fill ri-xl`}\r\n              style={{ color: event.color }}\r\n            />\r\n          </List.Content>\r\n          <List.Content>\r\n            <List.Header>{event.eventType}</List.Header>\r\n            <List.Description>\r\n              <b>{`${event.distance}ft`}</b>\r\n              {/* <b>{`${Coordinate.distanceBetween(\r\n                currentPosition ?? defaultPosition,\r\n                event.coordinates\r\n              )}ft`}</b> */}\r\n            </List.Description>\r\n          </List.Content>\r\n        </List.Item>\r\n      )),\r\n    [displayEvents, handleItemClick]\r\n  );\r\n\r\n  return (\r\n    <Segment\r\n      className=\"clickable\"\r\n      raised\r\n      inverted={inverted}\r\n      style={{ padding: 16 }}\r\n    >\r\n      <div className=\"panel-header\">\r\n        {!filtersVisible && (\r\n          <div className=\"panel-header-text\">\r\n            <Header inverted={inverted} as=\"h3\">\r\n              Nearby events\r\n            </Header>\r\n          </div>\r\n        )}\r\n        <Transition\r\n          visible={!filtersVisible}\r\n          animation=\"vertical flip\"\r\n          duration={300}\r\n        >\r\n          <div style={{ position: \"absolute\", right: 16 }}>\r\n            <Button circular size=\"tiny\" color=\"grey\" content=\"Sort\" />\r\n            <Button\r\n              circular\r\n              size=\"tiny\"\r\n              color=\"grey\"\r\n              content=\"Filter\"\r\n              onClick={() => setFiltersVisible((v) => !v)}\r\n            />\r\n          </div>\r\n        </Transition>\r\n          {filtersVisible && <button\r\n              style={{\r\n                border: \"none\",\r\n                backgroundColor: \"transparent\",\r\n                textAlign: \"center\",\r\n                fontSize: 18,\r\n                color: inverted ? \"white\" : \"#212121\",\r\n              }}\r\n              onClick={() => setFiltersVisible((v) => !v)}\r\n            >\r\n              <i className=\"ri-arrow-left-line panel-icon\" />\r\n            </button>}\r\n        <div className=\"button-row\">\r\n          <Transition\r\n            visible={filtersVisible}\r\n            animation=\"vertical flip\"\r\n            duration={300}\r\n          >\r\n            <div\r\n              style={{\r\n                position: \"absolute\",\r\n                top: 16,\r\n                maxWidth: \"100%\",\r\n                height: 48,\r\n                overflowX: \"auto\",\r\n                whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              {categories.map(({ type, text, style }) => (\r\n                <Button\r\n                  circular\r\n                  toggle\r\n                  size=\"tiny\"\r\n                  key={type}\r\n                  style={{\r\n                    backgroundColor: eventFilters[type]\r\n                      ? style.backgroundColor\r\n                      : \"grey\",\r\n                  }}\r\n                  onClick={() => handleFilterCategory(type)}\r\n                >\r\n                  {text}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </Transition>\r\n        </div>\r\n      </div>\r\n      <List\r\n        inverted={inverted}\r\n        divided\r\n        selection\r\n        verticalAlign=\"middle\"\r\n        style={{ maxHeight: 236, overflowY: \"auto\" }}\r\n      >\r\n        {listItems}\r\n      </List>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    events: state.events,\r\n    map: state.map,\r\n    inverted: state.preferences.invertedTheme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setEventFilter })(EventList);\r\n"],"sourceRoot":""}