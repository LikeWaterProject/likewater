{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","components/EventSubmit.js"],"names":["_objectDestructuringEmpty","obj","TypeError","Divider","props","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical","classes","cx","useKeyOnly","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","EventSubmit","Segment","raised","style","padding","paddingBottom","height"],"mappings":"wGAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCADvC,mC,sJCSA,SAASC,EAAQC,GACf,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBC,EAAWH,EAAMG,SACjBC,EAAUJ,EAAMI,QAChBC,EAASL,EAAMK,OACfC,EAASN,EAAMM,OACfC,EAAaP,EAAMO,WACnBC,EAAWR,EAAMQ,SACjBC,EAAUT,EAAMS,QAChBC,EAAWV,EAAMU,SACjBC,EAAUC,IAAG,KAAMC,YAAWV,EAAU,YAAaU,YAAWR,EAAQ,UAAWQ,YAAWP,EAAQ,UAAWO,YAAWN,EAAY,cAAeM,YAAWL,EAAU,YAAaK,YAAWJ,EAAS,WAAYI,YAAWH,EAAU,YAAa,UAAWR,GACtQY,EAAOC,YAAkBhB,EAASC,GAClCgB,EAAcC,YAAelB,EAASC,GAC1C,OAAOkB,IAAMC,cAAcH,EAAaI,IAAS,GAAIN,EAAM,CACzDZ,UAAWS,IACTU,IAAcC,MAAMrB,GAAYG,EAAUH,GAGhDF,EAAQwB,aAAe,CAAC,KAAM,WAAY,YAAa,WAAY,UAAW,SAAU,SAAU,aAAc,WAAY,UAAW,YACvIxB,EAAQyB,UAiCJ,GACWzB,QCtCA0B,UAbK,SAAC,GACnB,OAD2B,eAEzB,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNnB,UAAQ,EACRoB,MAAO,CAAEC,QAAS,EAAGC,cAAe,GAAIC,OAAQ,MAHlD,cAME,kBAAC,EAAD","file":"static/js/4.7d87073b.chunk.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","import React from \"react\";\r\nimport { Segment, Icon, Divider } from \"semantic-ui-react\";\r\n\r\nconst sampleEvent = {\r\n  type: \"Water Distribution\",\r\n  description: \"\",\r\n  distance: 250,\r\n  lastActive: \"Just now\",\r\n  icon: \"first-aid-kit\",\r\n  color: \"gainsboro\",\r\n};\r\n\r\nconst EventSubmit = ({}) => {\r\n  return (\r\n    <Segment\r\n      raised\r\n      inverted\r\n      style={{ padding: 8, paddingBottom: 44, height: 300 }}\r\n    >\r\n      EventSubmit\r\n      <Divider />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default EventSubmit;\r\n"],"sourceRoot":""}