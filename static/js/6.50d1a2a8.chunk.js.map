{"version":3,"sources":["components/EventDetails.js"],"names":["connect","state","map","console","log","currentPosition","useState","event","setEvent","useEffect","a","API","post","eventId","crossDomain","result","mapEvents","data","error","load","coordinates","getDistance","lon","lat","raised","inverted","style","padding","as","eventType","Image","className","icon","color","Content","Meta","eventDesc","Description","Extra","Date","parseInt","reportedDt","toISOString"],"mappings":"yOAsFeA,uBAJS,SAACC,GACvB,MAAO,CAAEC,IAAKD,EAAMC,OAGkB,GAAzBF,EA7EM,SAAC,GAAa,IAAXE,EAAU,EAAVA,IACtBC,QAAQC,IAAIF,GADoB,IAExBG,EAAoBH,EAApBG,gBAFwB,EAGNC,qBAHM,mBAGzBC,EAHyB,KAGlBC,EAHkB,KAoChC,OA/BAL,QAAQC,IAAIG,GAEZE,qBAAU,YACE,uCAAG,4BAAAC,EAAA,+EAEYC,IAAIC,KACvB,oBACA,CACEC,QAAS,wCAEX,CAAEC,aAAa,IAPR,OAEHC,EAFG,OASTZ,QAAQC,IAAIW,GACZP,EAASQ,YAAU,CAACD,EAAOE,OAAO,IAVzB,gDAYTd,QAAQe,MAAR,MAZS,yDAAH,qDAgBVC,KACC,IAEHhB,QAAQC,IAAIC,EAAZ,OAA6BE,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAOa,aACpCf,GACEF,QAAQC,IAAR,UACKiB,sBAAW,OAACd,QAAD,IAACA,OAAD,EAACA,EAAOa,YAAa,CACjCE,IAAKjB,EAAgB,GACrBkB,IAAKlB,EAAgB,KAHzB,MAQA,kBAAC,IAAD,CAASmB,QAAM,EAACC,UAAQ,EAACC,MAAO,CAAEC,QAAS,KACxCpB,EACC,oCACE,kBAAC,IAAD,CAAQkB,UAAQ,EAACG,GAAG,MAApB,OACGrB,QADH,IACGA,OADH,EACGA,EAAOsB,WAEV,kBAAC,IAAD,KACE,kBAAC,IAAKC,MAAN,KACG,IACD,uBACEC,UAAS,oBAAQxB,QAAR,IAAQA,OAAR,EAAQA,EAAOyB,KAAf,eACTN,MAAO,CAAEO,MAAK,OAAE1B,QAAF,IAAEA,OAAF,EAAEA,EAAO0B,UAG3B,kBAAC,IAAKC,QAAN,KACE,kBAAC,IAAKC,KAAN,YAAY5B,QAAZ,IAAYA,OAAZ,EAAYA,EAAO6B,WACnB,kBAAC,IAAKC,YAAN,KACGhC,GAAe,UACXgB,sBAAW,OAACd,QAAD,IAACA,OAAD,EAACA,EAAOa,YAAa,CACjCE,IAAKjB,EAAgB,GACrBkB,IAAKlB,EAAgB,KAHT,MAMlB,kBAAC,IAAKiC,MAAN,KACG,IAAIC,KAAKC,SAAQ,OAACjC,QAAD,IAACA,OAAD,EAACA,EAAOkC,aAAaC,kBAM/C,kBAAC,IAAD","file":"static/js/6.50d1a2a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getDistance } from \"geolib\";\r\nimport { Segment, Header, Item } from \"semantic-ui-react\";\r\n\r\nimport API from \"../api\";\r\nimport { mapEvents } from \"../hooks\";\r\nimport LoadingPanel from \"./LoadingPanel\";\r\n\r\nconst EventDetails = ({ map }) => {\r\n  console.log(map);\r\n  const { currentPosition } = map;\r\n  const [event, setEvent] = useState();\r\n  // const displayEvent = useEvents([event])[0];\r\n  console.log(event);\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      try {\r\n        const result = await API.post(\r\n          \"/vieweventdetails\",\r\n          {\r\n            eventId: \"D0B83D0C-0C96-46F5-8313-40FA9C6AA1D6\",\r\n          },\r\n          { crossDomain: true }\r\n        );\r\n        console.log(result);\r\n        setEvent(mapEvents([result.data])[0]);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n\r\n    load();\r\n  }, []);\r\n\r\n  console.log(currentPosition, event?.coordinates);\r\n  currentPosition &&\r\n    console.log(\r\n      `${getDistance(event?.coordinates, {\r\n        lon: currentPosition[0],\r\n        lat: currentPosition[1],\r\n      })}m`\r\n    );\r\n\r\n  return (\r\n    <Segment raised inverted style={{ padding: 16 }}>\r\n      {event ? (\r\n        <>\r\n          <Header inverted as=\"h3\">\r\n            {event?.eventType}\r\n          </Header>\r\n          <Item>\r\n            <Item.Image>\r\n              {\" \"}\r\n              <i\r\n                className={`ri-${event?.icon}-fill ri-xl`}\r\n                style={{ color: event?.color }}\r\n              />\r\n            </Item.Image>\r\n            <Item.Content>\r\n              <Item.Meta>{event?.eventDesc}</Item.Meta>\r\n              <Item.Description>\r\n                {currentPosition &&\r\n                  `${getDistance(event?.coordinates, {\r\n                    lon: currentPosition[0],\r\n                    lat: currentPosition[1],\r\n                  })}m`}\r\n              </Item.Description>\r\n              <Item.Extra>\r\n                {new Date(parseInt(event?.reportedDt)).toISOString()}\r\n              </Item.Extra>\r\n            </Item.Content>\r\n          </Item>\r\n        </>\r\n      ) : (\r\n        <LoadingPanel />\r\n      )}\r\n    </Segment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { map: state.map };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(EventDetails);\r\n"],"sourceRoot":""}