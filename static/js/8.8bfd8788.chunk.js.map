{"version":3,"sources":["components/EventSubmit.js"],"names":["options","key","EventType","value","text","icon","className","style","color","connect","state","eventTypes","events","markerPosition","map","inverted","preferences","invertedTheme","reportEvent","getEventTypes","lon","lat","useState","category","setCategory","type","setType","description","setDescription","history","useHistory","useEffect","categoryOptions","useMemo","handleSubmit","a","coordinates","eventCategory","eventType","eventDesc","push","raised","padding","as","Subheader","floated","toFixed","Select","label","placeholder","onChange","event","disabled","Input","size","circular","content","onClick"],"mappings":"uOAgBMA,EAAU,CACd,CACEC,IAAKC,IACLC,MAAOD,IACPE,KAAM,MACNC,KACE,uBACEC,UAAU,kCACVC,MAAO,CAAEC,MAAO,gBAItB,CACEP,IAAKC,IACLC,MAAOD,IACPE,KAAM,OACNC,KAAM,uBAAGC,UAAU,kCAErB,CACEL,IAAKC,IACLC,MAAOD,IACPE,KAAM,SACNC,KAAM,uBAAGC,UAAU,wCAErB,CACEL,IAAKC,IACLC,MAAOD,IACPE,KAAM,SACNC,KAAM,uBAAGC,UAAU,+BAErB,CACEL,IAAKC,IACLC,MAAOD,IACPE,KAAM,MACNC,KAAM,uBAAGC,UAAU,iCAmHRG,uBARS,SAACC,GACvB,MAAO,CACLC,WAAYD,EAAME,OAAOD,WACzBE,eAAgBH,EAAMI,IAAID,eAC1BE,SAAUL,EAAMM,YAAYC,iBAIQ,CAAEC,gBAAaC,mBAAxCV,EA/GK,SAAC,GAMd,IALLE,EAKI,EALJA,WACAE,EAII,EAJJA,eACAK,EAGI,EAHJA,YACAC,EAEI,EAFJA,cACAJ,EACI,EADJA,SACI,SACeF,QADf,IACeA,IAAkB,CAAC,EAAG,GADrC,mBACGO,EADH,KACQC,EADR,OAE4BC,qBAF5B,mBAEGC,EAFH,KAEaC,EAFb,OAGoBF,qBAHpB,mBAGGG,EAHH,KAGSC,EAHT,OAIkCJ,mBAAS,IAJ3C,mBAIGK,EAJH,KAIgBC,EAJhB,KAKEC,EAAUC,cAEhBC,qBAAU,WACHpB,GAAYQ,MAChB,IAEH,IAAMa,EAAkBC,mBAAQ,WAC9B,OAAOtB,GAAcY,EACjBZ,EAAWY,GAAUT,KAAI,SAACW,GAAD,MAAW,CAClCxB,IAAKwB,EACLrB,KAAMqB,EACNtB,MAAOsB,MAET,CAAC,CAAErB,KAAM,GAAID,MAAO,OACvB,CAACQ,EAAYY,IAEVW,EAAY,uCAAG,sBAAAC,EAAA,2DACfZ,GAAYH,GAAOC,GAAOM,GADX,gCAEXT,EAAY,CAChBkB,YAAa,CAAEhB,MAAKC,OACpBgB,cAAed,EACfe,UAAWb,EACXc,UAAWZ,IANI,OAQjBE,EAAQW,KAAK,KARI,2CAAH,qDAYlB,OACE,kBAAC,IAAD,CACElC,UAAU,YACVmC,QAAM,EACN1B,SAAUA,EACVR,MAAO,CAAEmC,QAAS,KAElB,kBAAC,IAAD,CAAQ3B,SAAUA,EAAU4B,GAAG,MAA/B,eAEE,kBAAC,IAAOC,UAAR,CAAkBC,QAAQ,SAA1B,WAAuCxB,EAAIyB,QAAQ,GAAnD,aAA0D1B,EAAI0B,QAC5D,GADF,OAIF,kBAAC,IAAD,CAAM/B,SAAUA,GAoBd,kBAAC,IAAKgC,OAAN,CACEC,MAAM,WACNhD,QAASA,EACTiD,YAAa,UACbC,SAAU,SAACC,EAAD,OAAUhD,EAAV,EAAUA,MAAV,OAAsBqB,EAAYrB,MAE9C,kBAAC,IAAK4C,OAAN,CACEC,MAAM,OACNhD,QAASgC,EACToB,UAAW7B,EACX0B,YAAa,UACbC,SAAU,SAACC,EAAD,OAAUhD,EAAV,EAAUA,MAAV,OAAsBuB,EAAQvB,MAE1C,kBAAC,IAAKkD,MAAN,CACEL,MAAM,cACNC,YAAY,6BACZ9C,MAAOwB,EACPuB,SAAU,SAACC,EAAD,OAAUhD,EAAV,EAAUA,MAAV,OAAsByB,EAAezB,MAEjD,kBAAC,IAAD,CACEmD,KAAK,QACLC,UAAQ,EACR/C,MAAM,OACNgD,QAAQ,SACRC,QAASvB","file":"static/js/8.8bfd8788.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Segment,\r\n  Header,\r\n  Icon,\r\n  Form,\r\n  Divider,\r\n  Button,\r\n  Label,\r\n} from \"semantic-ui-react\";\r\n\r\nimport { reportEvent, getEventTypes } from \"../actions\";\r\nimport * as EventType from \"../events/types\";\r\n\r\nconst options = [\r\n  {\r\n    key: EventType.AID,\r\n    value: EventType.AID,\r\n    text: \"Aid\",\r\n    icon: (\r\n      <i\r\n        className=\"ri-first-aid-kit-fill ri-lg aid\"\r\n        style={{ color: \"gainsboro\" }}\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    key: EventType.INFO,\r\n    value: EventType.INFO,\r\n    text: \"Info\",\r\n    icon: <i className=\"ri-broadcast-fill ri-lg info\" />,\r\n  },\r\n  {\r\n    key: EventType.POLICE,\r\n    value: EventType.POLICE,\r\n    text: \"Police\",\r\n    icon: <i className=\"ri-alarm-warning-fill ri-lg police\" />,\r\n  },\r\n  {\r\n    key: EventType.SAFETY,\r\n    value: EventType.SAFETY,\r\n    text: \"Safety\",\r\n    icon: <i className=\"ri-fire-fill ri-lg safety\" />,\r\n  },\r\n  {\r\n    key: EventType.EMERGENCY,\r\n    value: EventType.EMERGENCY,\r\n    text: \"SOS\",\r\n    icon: <i className=\"ri-lifebuoy-fill ri-lg sos\" />,\r\n  },\r\n];\r\n\r\nconst EventSubmit = ({\r\n  eventTypes,\r\n  markerPosition,\r\n  reportEvent,\r\n  getEventTypes,\r\n  inverted,\r\n}) => {\r\n  const [lon, lat] = markerPosition ?? [0, 0];\r\n  const [category, setCategory] = useState();\r\n  const [type, setType] = useState();\r\n  const [description, setDescription] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!eventTypes) getEventTypes();\r\n  }, []);\r\n\r\n  const categoryOptions = useMemo(() => {\r\n    return eventTypes && category\r\n      ? eventTypes[category].map((type) => ({\r\n          key: type,\r\n          text: type,\r\n          value: type,\r\n        }))\r\n      : [{ text: \"\", value: \"\" }];\r\n  }, [eventTypes, category]);\r\n\r\n  const handleSubmit = async () => {\r\n    if (category && lon && lat && description) {\r\n      await reportEvent({\r\n        coordinates: { lon, lat },\r\n        eventCategory: category,\r\n        eventType: type,\r\n        eventDesc: description,\r\n      });\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Segment\r\n      className=\"clickable\"\r\n      raised\r\n      inverted={inverted}\r\n      style={{ padding: 16 }}\r\n    >\r\n      <Header inverted={inverted} as=\"h3\">\r\n        Submit event\r\n        <Header.Subheader floated=\"right\">{`[${lat.toFixed(4)}, ${lon.toFixed(\r\n          4\r\n        )}]`}</Header.Subheader>\r\n      </Header>\r\n      <Form inverted={inverted}>\r\n        {/* <Form.Group inline>\r\n          <label>Type</label>\r\n          <Button.Group compact color=\"black\">\r\n            {options.map((option) => (\r\n              <Button\r\n                active={category === option.value}\r\n                // inverted={category !== option.value}\r\n                // basic\r\n                // size=\"large\"\r\n                // as={Button}\r\n                key={option.key}\r\n                onClick={() => setCategory(option.value)}\r\n              >\r\n                {option.icon}\r\n                {option.text}\r\n              </Button>\r\n            ))}\r\n          </Button.Group>\r\n        </Form.Group> */}\r\n        <Form.Select\r\n          label=\"Category\"\r\n          options={options}\r\n          placeholder={\"General\"}\r\n          onChange={(event, { value }) => setCategory(value)}\r\n        />\r\n        <Form.Select\r\n          label=\"Type\"\r\n          options={categoryOptions}\r\n          disabled={!category}\r\n          placeholder={\"General\"}\r\n          onChange={(event, { value }) => setType(value)}\r\n        />\r\n        <Form.Input\r\n          label=\"Description\"\r\n          placeholder=\"E.g. Barricade on Main St.\"\r\n          value={description}\r\n          onChange={(event, { value }) => setDescription(value)}\r\n        />\r\n        <Button\r\n          size=\"small\"\r\n          circular\r\n          color=\"grey\"\r\n          content=\"Submit\"\r\n          onClick={handleSubmit}\r\n        />\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    eventTypes: state.events.eventTypes,\r\n    markerPosition: state.map.markerPosition,\r\n    inverted: state.preferences.invertedTheme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { reportEvent, getEventTypes })(\r\n  EventSubmit\r\n);\r\n"],"sourceRoot":""}