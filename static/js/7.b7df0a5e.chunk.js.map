{"version":3,"sources":["components/EventList.js"],"names":["connect","state","events","map","theme","preferences","invertedTheme","setEventFilter","history","useHistory","nearbyEvents","eventFilters","useState","sortBy","displayEvents","useEvents","visible","setVisible","handleItemClick","useCallback","id","push","handleSelectFilters","v","listItems","useMemo","event","index","Item","key","onClick","eventId","Content","floated","formatDistance","parseInt","reportedDt","Date","now","addSuffix","style","paddingTop","className","icon","color","Header","eventDesc","Description","distance","raised","inverted","padding","as","animation","duration","position","right","circular","size","content","backgroundColor","divided","selection","verticalAlign","maxHeight","overflowY"],"mappings":"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","file":"static/js/7.b7df0a5e.chunk.js","sourcesContent":["import React, { useState, useCallback, useMemo } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { formatDistance } from \"date-fns\";\r\nimport {\r\n  Segment,\r\n  Header,\r\n  List,\r\n  Button,\r\n  Popup,\r\n  Grid,\r\n  Transition,\r\n} from \"semantic-ui-react\";\r\n\r\nimport { setEventFilter } from \"../actions\";\r\nimport { useEvents } from \"../hooks\";\r\n// import { Coordinate } from \"../datatypes\";\r\n\r\nconst EventList = ({ map, events, theme, setEventFilter }) => {\r\n  const history = useHistory();\r\n  const { nearbyEvents, eventFilters } = events;\r\n  const [sortBy, setSortBy] = useState(\"distance\");\r\n  const displayEvents = useEvents(nearbyEvents, eventFilters, sortBy);\r\n  const [visible, setVisible] = useState(false);\r\n  // const { currentPosition, defaultPosition } = map;\r\n\r\n  const handleItemClick = useCallback(\r\n    (id) => {\r\n      history.push(`/events/${id}`);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  const handleSelectFilters = () => {\r\n    setVisible((v) => !v);\r\n  };\r\n\r\n  const handleFilterCategory = () => {};\r\n\r\n  const listItems = useMemo(\r\n    () =>\r\n      displayEvents.map((event, index) => (\r\n        <List.Item key={index} onClick={() => handleItemClick(event.eventId)}>\r\n          <List.Content floated=\"right\">\r\n            {formatDistance(parseInt(event.reportedDt), Date.now(), {\r\n              addSuffix: true,\r\n            })}\r\n          </List.Content>\r\n          <List.Content floated=\"left\" style={{ paddingTop: 8 }}>\r\n            <i\r\n              className={`ri-${event.icon}-fill ri-xl`}\r\n              style={{ color: event.color }}\r\n            />\r\n          </List.Content>\r\n          <List.Content>\r\n            <List.Header>{event.eventDesc}</List.Header>\r\n            <List.Description>\r\n              <b>{`${event.distance}ft`}</b>\r\n              {/* <b>{`${Coordinate.distanceBetween(\r\n                currentPosition ?? defaultPosition,\r\n                event.coordinates\r\n              )}ft`}</b> */}\r\n            </List.Description>\r\n          </List.Content>\r\n        </List.Item>\r\n      )),\r\n    [displayEvents, handleItemClick]\r\n  );\r\n\r\n  return (\r\n    <Segment\r\n      className=\"clickable\"\r\n      raised\r\n      inverted={theme}\r\n      style={{ padding: 16 }}\r\n    >\r\n      <div className=\"panel-header\">\r\n        {!visible && (\r\n          <div className=\"panel-header-text\">\r\n            <Header inverted={theme} as=\"h3\">\r\n              Nearby events\r\n            </Header>\r\n          </div>\r\n        )}\r\n        <Transition visible={!visible} animation=\"vertical flip\" duration={300}>\r\n          <div style={{ position: \"absolute\", right: 16 }}>\r\n            <Button circular size=\"tiny\" color=\"grey\" content=\"Sort\" />\r\n            <Button\r\n              circular\r\n              size=\"tiny\"\r\n              color=\"grey\"\r\n              content=\"Filter\"\r\n              onClick={handleSelectFilters}\r\n            />\r\n          </div>\r\n        </Transition>\r\n        <Transition visible={visible} animation=\"vertical flip\" duration={300}>\r\n          <div style={{ position: \"absolute\", right: 16 }}>\r\n            <Button\r\n              circular\r\n              size=\"tiny\"\r\n              color=\"grey\"\r\n              content=\"Aid\"\r\n              style={{ color: \"#676868\", backgroundColor: \"gainsboro\" }}\r\n              onClick={handleSelectFilters}\r\n            />\r\n            <Button\r\n              circular\r\n              size=\"tiny\"\r\n              color=\"grey\"\r\n              content=\"Info\"\r\n              style={{ backgroundColor: \"mediumseagreen\" }}\r\n              onClick={handleSelectFilters}\r\n            />\r\n            <Button\r\n              circular\r\n              size=\"tiny\"\r\n              color=\"grey\"\r\n              content=\"Police\"\r\n              style={{ backgroundColor: \"royalblue\" }}\r\n              onClick={handleSelectFilters}\r\n            />\r\n            <Button\r\n              circular\r\n              size=\"tiny\"\r\n              color=\"grey\"\r\n              content=\"Safety\"\r\n              style={{ backgroundColor: \"darkorange\" }}\r\n              onClick={handleSelectFilters}\r\n            />\r\n            <Button\r\n              circular\r\n              size=\"tiny\"\r\n              color=\"grey\"\r\n              content=\"SOS\"\r\n              style={{ backgroundColor: \"crimson\" }}\r\n              onClick={handleSelectFilters}\r\n            />\r\n          </div>\r\n        </Transition>\r\n      </div>\r\n      <List\r\n        inverted={theme}\r\n        divided\r\n        selection\r\n        verticalAlign=\"middle\"\r\n        style={{ maxHeight: 236, overflowY: \"auto\" }}\r\n      >\r\n        {listItems}\r\n      </List>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    events: state.events,\r\n    map: state.map,\r\n    theme: state.preferences.invertedTheme,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setEventFilter })(EventList);\r\n"],"sourceRoot":""}