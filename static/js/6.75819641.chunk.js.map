{"version":3,"sources":["components/EventDetails.js"],"names":["connect","state","map","currentPosition","useState","event","setEvent","history","useHistory","useEffect","a","API","post","eventId","crossDomain","result","console","log","mapEvents","data","error","load","raised","inverted","style","padding","Header","as","className","border","backgroundColor","textAlign","color","onClick","push","eventType","Content","Description","getDistance","coordinates","lon","longitude","lat","latitude","Meta","eventDesc","Extra","Date","parseInt","reportedDt","toISOString"],"mappings":"wOAgFeA,uBAJS,SAACC,GACvB,MAAO,CAAEC,IAAKD,EAAMC,OAGkB,GAAzBF,EAtEM,SAAC,GAAa,IACzBG,EADwB,EAAVD,IACdC,gBADwB,EAENC,qBAFM,mBAEzBC,EAFyB,KAElBC,EAFkB,KAG1BC,EAAUC,cAEhBC,qBAAU,YACE,uCAAG,4BAAAC,EAAA,+EAEYC,IAAIC,KACvB,oBACA,CACEC,QAAS,wCAEX,CAAEC,aAAa,IAPR,OAEHC,EAFG,OASTC,QAAQC,IAAIF,GACZT,EAASY,YAAU,CAACH,EAAOI,OAAO,IAVzB,gDAYTH,QAAQI,MAAR,MAZS,yDAAH,qDAgBVC,KACC,IAMH,OACE,kBAAC,IAAD,CAASC,QAAM,EAACC,UAAQ,EAACC,MAAO,CAAEC,QAAS,KACxCpB,EACC,kBAAC,IAAD,KACE,kBAAC,IAAKqB,OAAN,CAAaC,GAAG,KAAKC,UAAU,gBAC7B,4BAAQJ,MAAO,CAAEK,OAAQ,OAAQC,gBAAiB,cAAeC,UAAW,SAAUC,MAAO,SAAWC,QATxF,WACxB1B,EAAQ2B,KAAK,OAQ+H,uBAAGN,UAAU,mCADnJ,OAGGvB,QAHH,IAGGA,OAHH,EAGGA,EAAO8B,WAQV,kBAAC,IAAKC,QAAN,KACE,kBAAC,IAAKC,YAAN,KACGlC,GACCE,GADD,UAEIiC,sBAAW,OAACjC,QAAD,IAACA,OAAD,EAACA,EAAOkC,YAAa,CACjCC,IAAKrC,EAAgBsC,UACrBC,IAAKvC,EAAgBwC,WAJxB,MAOH,kBAAC,IAAKC,KAAN,YAAYvC,QAAZ,IAAYA,OAAZ,EAAYA,EAAOwC,WACnB,kBAAC,IAAKC,MAAN,KACG,IAAIC,KAAKC,SAAQ,OAAC3C,QAAD,IAACA,OAAD,EAACA,EAAO4C,aAAaC,iBAK7C,kBAAC,IAAD","file":"static/js/6.75819641.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getDistance } from \"geolib\";\r\nimport { Segment, Header, Item, Button } from \"semantic-ui-react\";\r\n\r\nimport API from \"../api\";\r\nimport { mapEvents } from \"../hooks\";\r\nimport LoadingPanel from \"./LoadingPanel\";\r\n\r\nconst EventDetails = ({ map }) => {\r\n  const { currentPosition } = map;\r\n  const [event, setEvent] = useState();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      try {\r\n        const result = await API.post(\r\n          \"/vieweventdetails\",\r\n          {\r\n            eventId: \"D0B83D0C-0C96-46F5-8313-40FA9C6AA1D6\",\r\n          },\r\n          { crossDomain: true }\r\n        );\r\n        console.log(result);\r\n        setEvent(mapEvents([result.data])[0]);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n\r\n    load();\r\n  }, []);\r\n\r\n  const handleBackPressed = () => {\r\n    history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <Segment raised inverted style={{ padding: 16 }}>\r\n      {event ? (\r\n        <Item>\r\n          <Item.Header as=\"h3\" className=\"panel-header\">\r\n            <button style={{ border: \"none\", backgroundColor: \"transparent\", textAlign: \"center\", color: \"white\" }} onClick={handleBackPressed}><i className=\"ri-arrow-left-line panel-icon\" /></button>\r\n            {/* <Button basic inverted secondary circular className=\"ri-arrow-left-line\" /> */}\r\n            {event?.eventType}\r\n          </Item.Header>\r\n          {/* <Item.Image>\r\n              <i\r\n                className={`ri-${event?.icon}-fill ri-xl`}\r\n                style={{ color: event?.color }}\r\n              />\r\n            </Item.Image> */}\r\n          <Item.Content>\r\n            <Item.Description>\r\n              {currentPosition &&\r\n                event &&\r\n                `${getDistance(event?.coordinates, {\r\n                  lon: currentPosition.longitude,\r\n                  lat: currentPosition.latitude,\r\n                })}m`}\r\n            </Item.Description>\r\n            <Item.Meta>{event?.eventDesc}</Item.Meta>\r\n            <Item.Extra>\r\n              {new Date(parseInt(event?.reportedDt)).toISOString()}\r\n            </Item.Extra>\r\n          </Item.Content>\r\n        </Item>\r\n      ) : (\r\n        <LoadingPanel />\r\n      )}\r\n    </Segment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { map: state.map };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(EventDetails);\r\n"],"sourceRoot":""}